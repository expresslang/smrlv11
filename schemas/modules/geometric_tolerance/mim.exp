(*
ISO TC184/SC4/WG12 N11243 - ISO/TS 10303-1051 Geometric tolerance - EXPRESS MIM
Supersedes ISO TC184/SC4/WG12 N10190
*)


SCHEMA Geometric_tolerance_mim;

USE FROM Derived_shape_element_mim;       -- ISO/TS 10303-1130
USE FROM Dimension_tolerance_mim;         -- ISO/TS 10303-1050
USE FROM Feature_and_connection_zone_mim; -- ISO/TS 10303-1671
USE FROM Measure_representation_mim;      -- ISO/TS 10303-1118
USE FROM Part_shape_mim; -- ISO/TS 10303-1807
USE FROM shape_aspect_definition_schema -- ISO 10303-47
  (all_around_shape_aspect,
  apex,
  between_shape_aspect,
  centre_of_symmetry,
  continuous_shape_aspect,
  composite_shape_aspect,
  composite_group_shape_aspect,
  extension,
  geometric_alignment,
  geometric_contact,
  geometric_intersection,
  parallel_offset,
  perpendicular_to,
  shape_representation_with_parameters,
  symmetric_shape_aspect,
  tangent);
USE FROM Shape_composition_mim;           -- ISO/TS 10303-1742
USE FROM shape_tolerance_schema  -- ISO 10303-47
  (dimension_related_tolerance_zone_element,
  group_geometric_tolerance_with_datum_system_reference,
  datum_system_for_composite_group_element,
  direction_feature_tolerance_zone, 
  directed_tolerance_zone,
  geometric_tolerance,
  geometric_tolerance_auxiliary_classification,
  geometric_tolerance_relationship,
  geometric_tolerance_with_datum_reference,
  geometric_tolerance_with_defined_unit,
  geometric_tolerance_with_defined_area_unit,
  geometric_tolerance_with_maximum_tolerance,
  geometric_tolerance_with_modifiers,
  gps_filtration_enumeration,
  gps_filtration_specification,
  gps_filter,
  modified_geometric_tolerance,
  non_uniform_zone_definition,
  oriented_tolerance_zone,
  projected_zone_definition,
  projected_zone_definition_with_offset,
  runout_zone_definition,
  runout_zone_orientation_reference_direction,
  tolerance_zone,
  tolerance_zone_definition,
  tolerance_zone_form,
  tolerance_zone_with_datum,
  cylindricity_tolerance,
  flatness_tolerance,
  line_profile_tolerance,
  position_tolerance,
  roundness_tolerance,
  straightness_tolerance,
  surface_profile_tolerance,
  angularity_tolerance,
  circular_runout_tolerance,
  coaxiality_tolerance,
  concentricity_tolerance,
  parallelism_tolerance,
  perpendicularity_tolerance,
  symmetry_tolerance,
  total_runout_tolerance,
  unequally_disposed_geometric_tolerance);
USE FROM Support_resource_mim;            -- ISO/TS 10303-1800
USE FROM Value_with_unit_extension_mim;   -- ISO/TS 10303-1753
REFERENCE FROM support_resource_schema   -- ISO 10303-41
  (bag_to_set,
   type_check_function);

RULE non_uniform_zone_definition_constraint FOR (tolerance_zone_definition, tolerance_zone, tolerance_zone_form);
LOCAL
   tzf_set  : SET OF tolerance_zone_form := QUERY( tzf <* tolerance_zone_form | tzf\tolerance_zone_form.name = 'non uniform');
   nuzd_set : SET OF tolerance_zone_definition := QUERY( tzd <* tolerance_zone_definition | 'SHAPE_TOLERANCE_SCHEMA.NON_UNIFORM_ZONE_DEFINITION' IN TYPEOF(tzd));
END_LOCAL;

WHERE
WR1: QUERY(tzd <* nuzd_set |
           (tzd\tolerance_zone_definition.zone\tolerance_zone.form IN tzf_set)
      ) = nuzd_set;
END_RULE;

RULE unique_gdt_element_id_constraint for (
                                          dimensional_location,
                                          dimensional_size,
                                          geometric_tolerance,
                                          product_definition_shape,
                                          shape_aspect,
                                          shape_aspect_relationship);
LOCAL
 bss    : BAG OF STRING := [];
 cum_bss : BAG OF STRING := [];
 dssa   : SET OF dimensional_size := [];
 dssai  : SET OF dimensional_size := [];
 
 gtsi   : SET OF geometric_tolerance := QUERY(gtsi <* geometric_tolerance | EXISTS(gtsi\geometric_tolerance.id));
 
 sarsa  : SET OF shape_aspect_relationship := [];
 sarsai : SET OF shape_aspect_relationship := [];

 ssa    : SET OF shape_aspect := [];
 ssai   : SET OF shape_aspect := [];
 pass   : BOOLEAN := TRUE;
END_LOCAL;

REPEAT ii := 1 TO SIZEOF (product_definition_shape) WHILE pass;
 bss  := [];
-- Shape_aspect checks
 ssa  := bag_to_set(USEDIN(product_definition_shape[ii], 'PRODUCT_PROPERTY_DEFINITION_SCHEMA.' + 'SHAPE_ASPECT.' + 'OF_SHAPE'));
 ssai := QUERY(sa <* ssa | EXISTS(sa\shape_aspect.id));

-- check for all ids present if one is.
 IF 
  ((SIZEOF(ssai)) > 0) AND
  ((SIZEOF(ssai)) <> SIZEOF(ssa)) 
 THEN pass := FALSE;
 END_IF;

 REPEAT i := 1 to SIZEOF (ssai);
-- Build id BAG
  IF (ssai[i] IN ssa) THEN
   bss := bss + ssai[i]\shape_aspect.id;
  END_IF;

--check instances dependent on shape_aspect with ids

-- dimensional_size checks
-- All dimensional_size for this product_definition_shape
 dssa  := bag_to_set(USEDIN(ssai[i], 'SHAPE_DIMENSION_SCHEMA.' + 'DIMENSIONAL_SIZE.' + 'APPLIES_TO'));
 dssai := QUERY(ds <* dssa | EXISTS(ds\dimensional_size.id));

-- check for all ids present if one is.
 IF 
  ((SIZEOF(dssai)) > 0) AND
  ((SIZEOF(dssai)) <> SIZEOF(dssa)) 
 THEN pass := FALSE;
 END_IF;

 REPEAT j := 1 to SIZEOF (dssai);
  IF (dssai[j]\dimensional_size.applies_to IN ssa) THEN
   bss := bss + dssai[j]\dimensional_size.id;
  END_IF;
 END_REPEAT;
-- end internal shape_aspect checks


-- shape_aspect_relationship checks
-- All shape_aspect_relationship for this product_definition_shape
 sarsa  := bag_to_set(USEDIN(ssai[i], 'PRODUCT_PROPERTY_DEFINITION_SCHEMA.' + 'SHAPE_ASPECT_RELATIONSHIP.' + 'RELATING_SHAPE_ASPECT'));
 sarsai := QUERY(sar <* sarsa | EXISTS(sar\shape_aspect_relationship.id));
 
-- check for all ids present if one is.
 IF 
  ((SIZEOF(sarsai)) > 0) AND
  ((SIZEOF(sarsai)) <> SIZEOF(sarsa)) 
 THEN pass := FALSE;
 END_IF;

 REPEAT j := 1 to SIZEOF (sarsai);
  IF (sarsai[j]\shape_aspect_relationship.relating_shape_aspect IN ssa) THEN
   bss := bss + sarsai[j]\shape_aspect_relationship.id;
  END_IF;
 END_REPEAT; -- shape_aspect_relationship checks

END_REPEAT; --shape_aspect loop
cum_bss := cum_bss + bss;

END_REPEAT; --pds loop


-- geometric_tolerance checks
-- check for all ids present if one is.
 IF 
  ((SIZEOF(gtsi)) > 0) AND
  ((SIZEOF(gtsi)) <> SIZEOF(geometric_tolerance)) 
 THEN pass := FALSE;
 END_IF;

 REPEAT j := 1 to SIZEOF (gtsi);
-- Build id BAG
  IF (gtsi[j] IN geometric_tolerance) THEN
   cum_bss := cum_bss + gtsi[j]\geometric_tolerance.id;
  END_IF;

--cumulative check over all product_definition_shape instances and all geometric_tolerance instances.
 IF 
 (SIZEOF(bag_to_set(cum_bss)) <> SIZEOF(cum_bss)) 
 THEN pass := FALSE;
 END_IF;
END_REPEAT; --geometric_tolerance loop

WHERE
  WR1 : pass;
END_RULE;

RULE tolerance_zone_form_name_constraint for (tolerance_zone_form);
LOCAL
 names : SET OF STRING :=
  [ 'within a circle',
    'within a cylinder',
    'within a cone',
    'within a single complex surface',
    'within a sphere',
    'between two coaxial cylinders',
    'between two concentric circles',
    'between two equidistant curves',
    'between two equidistant complex lines or two parallel straight lines',
    'between two equidistant complex surfaces or two parallel planes',
    'between two equidistant surfaces',
    'between two non-equidistant complex lines or two non-parallel straight lines',
    'between two non-equidistant complex surfaces or two non-parallel planes',
    'between two parallel circles on a conical surface',
    'between two parallel circles of the same diameter',
    'non uniform',
    'cylindrical or circular',
    'spherical',
    'unknown'];
 pass : BOOLEAN := TRUE;
END_LOCAL;
REPEAT i := 1 to SIZEOF(tolerance_zone_form) WHILE pass;
 pass := (tolerance_zone_form[i].name IN names);
END_REPEAT;
WHERE
 WR1: pass;
END_RULE;

END_SCHEMA;  -- Geometric_tolerance_mim
