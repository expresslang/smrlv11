(*
   Part1000: $Id: $
 STEPmod.CVS.Id: mim.exp,v 1.5 2019/02/18 02:22:07 ftanaka Exp
   ISO TC184/SC4/WG12 N10017 - ISO/TS 10303-1841 annotated_3d_model_equivalence_assembly - EXPRESS MIM*)

SCHEMA Annotated_3d_model_equivalence_assembly_mim;

  USE FROM Annotated_3d_model_equivalence_shape_mim;	--  ISO/TS 10303-1840

  USE FROM Assembly_constraints_mim;	--  ISO/TS 10303-1794

  USE FROM Contextual_shape_positioning_mim;	--  ISO/TS 10303-1027
  
  USE FROM product_definition_schema   -- ISO 10303-41
    (product_definition_or_reference);

  USE FROM representation_schema   -- ISO 10303-43
	(compound_representation_item,
	 list_representation_item,
	 representation_item_relationship,
	 value_representation_item);

  REFERENCE FROM shape_data_quality_criteria_schema   -- ISO 10303-59
	(value_limit_type);

  REFERENCE FROM support_resource_schema   -- ISO 10303-41 
    (bag_to_set);

  TYPE a3ma_accuracy_type_name = EXTENSIBLE ENUMERATION BASED_ON a3m_accuracy_type_name WITH
    (atna_others);
  END_TYPE;
  
  TYPE a3ma_detected_difference_type_name = EXTENSIBLE ENUMERATION BASED_ON a3m_detected_difference_type_name WITH
    (ddna_a3ms_inspected_equivalence_element_select,
     ddna_assembly_component_usage,
     ddna_binary_assembly_constraint,
     ddna_cartesian_point,
     ddna_context_dependent_shape_representation,
     ddna_count_measure,
     ddna_multi_level_reference_designator,
     ddna_no_element,
     ddna_others,
     ddna_volume_measure);
  END_TYPE;
 
  TYPE a3ma_element_type_name = EXTENSIBLE ENUMERATION BASED_ON a3m_element_type_name WITH
    (etna_product_definition_or_reference,
     etna_shape_representation,
     etna_others);
  END_TYPE;

  TYPE a3ma_equivalence_detected_difference_select = EXTENSIBLE SELECT 
    BASED_ON equivalence_detected_difference_select WITH
    (a3ms_inspected_equivalence_element_select,
     assembly_component_usage,
     binary_assembly_constraint,
     cartesian_point,
     context_dependent_shape_representation,
     count_measure,
     multi_level_reference_designator,
     volume_measure);
  END_TYPE;

  TYPE a3ma_equivalence_measured_value_select = EXTENSIBLE SELECT 
    BASED_ON a3m_equivalence_measured_value_select WITH
    (a3ma_length_measure_and_context_dependent_measure_pair,
     context_dependent_measure,
     length_measure,
     plane_angle_measure,
     volume_measure);
  END_TYPE;

  TYPE a3ma_inspected_equivalence_element_select = EXTENSIBLE GENERIC_ENTITY SELECT 
    BASED_ON inspected_equivalence_element_select WITH
    (product_definition_or_reference,
     shape_representation);
  END_TYPE;

  TYPE a3ma_measured_data_type_name = EXTENSIBLE ENUMERATION BASED_ON a3m_measured_data_type_name WITH
    (mdna_boolean_value,
	 mdna_context_dependent_measure,
     mdna_length_measure,
	 mdna_length_measure_and_context_dependent_measure,
     mdna_others,
     mdna_plane_angle_measure,
     mdna_volume_measure);
  END_TYPE;
  
  TYPE a3ma_target_annotated_3d_model_select = EXTENSIBLE GENERIC_ENTITY SELECT 
    BASED_ON target_annotated_3d_model_select WITH
    (shape_representation_relationship);
  END_TYPE;

  ENTITY a3m_equivalence_criterion_for_assembly
    ABSTRACT SUPERTYPE OF 
      (ONEOF(a3m_equivalence_criterion_of_assembly_data_structure,
             a3m_equivalence_criterion_of_detailed_assembly_data_content,
             a3m_equivalence_criterion_of_component_property_difference,
             a3m_equivalence_criterion_of_representative_assembly_property_value))
    SUBTYPE OF(a3m_equivalence_criterion);
      SELF\a3m_equivalence_criterion.comparing_element_types :  LIST[1:?] OF a3ma_element_type_name;
      SELF\a3m_equivalence_criterion.compared_element_types :  LIST[1:?] OF a3ma_element_type_name;
      SELF\a3m_equivalence_criterion.measured_data_type : a3ma_measured_data_type_name;
      SELF\a3m_equivalence_criterion.detected_difference_types : LIST[1:?] OF a3ma_detected_difference_type_name;
    DERIVE
      SELF\A3m_equivalence_criterion.accuracy_types : LIST[0:0] OF a3ma_accuracy_type_name := [];  
    WHERE
      WR1: a3ma_validate_accuracy_types(SELF,SELF);
   END_ENTITY;

  ENTITY a3m_equivalence_criterion_of_assembly_data_structure
    ABSTRACT SUPERTYPE OF
     (ONEOF  (different_component_identification_via_multi_level_reference,
              mismatch_of_component,
              missing_assembly_constraint,
              missing_component))
    SUBTYPE OF(a3m_equivalence_criterion_for_assembly);
    DERIVE
      SELF\a3m_equivalence_criterion.comparing_element_types :  LIST[1:1] OF a3ma_element_type_name := [etna_product_definition_or_reference];
      SELF\a3m_equivalence_criterion.compared_element_types :  LIST[1:1] OF a3ma_element_type_name := [etna_product_definition_or_reference];
  END_ENTITY;

  ENTITY a3m_equivalence_criterion_of_component_property_difference
    ABSTRACT SUPERTYPE OF
     (different_component_shape)
    SUBTYPE OF(a3m_equivalence_criterion_for_assembly);
      SELF\a3m_equivalence_criterion.assessment_specification : a3m_equivalence_assessment_by_logical_test;
    DERIVE
      SELF\a3m_equivalence_criterion.measured_data_type: a3ma_measured_data_type_name := mdna_boolean_value;
  END_ENTITY;

  ENTITY a3m_equivalence_criterion_of_detailed_assembly_data_content
    ABSTRACT SUPERTYPE OF
     (ONEOF  (different_angle_of_assembly_constraint,
              different_assembly_constraint_type,
     		  different_component_type,
              different_length_of_assembly_constraint,
              different_placement_of_component))
    SUBTYPE OF(a3m_equivalence_criterion_for_assembly);
    DERIVE
      SELF\a3m_equivalence_criterion.comparing_element_types :  LIST[1:1] OF a3ma_element_type_name := [etna_product_definition_or_reference];
      SELF\a3m_equivalence_criterion.compared_element_types :  LIST[1:1] OF a3ma_element_type_name := [etna_product_definition_or_reference];
  END_ENTITY;
     
  ENTITY a3m_equivalence_criterion_of_representative_assembly_property_value
    ABSTRACT SUPERTYPE OF
     (ONEOF  (different_assembly_centroid,
              different_assembly_centroid_using_notional_solid,
              different_assembly_volume,
              different_number_of_components))
    SUBTYPE OF(a3m_equivalence_criterion_for_assembly);
    DERIVE
      SELF\a3m_equivalence_criterion.comparing_element_types :  LIST[1:1] OF a3ma_element_type_name := [etna_product_definition_or_reference];
      SELF\a3m_equivalence_criterion.compared_element_types :  LIST[1:1] OF a3ma_element_type_name := [etna_product_definition_or_reference];
  END_ENTITY;
  
  ENTITY a3m_equivalence_inspection_result_representation_for_assembly
    SUBTYPE OF(a3m_equivalence_inspection_result_representation);
    WHERE
      WR1 : SIZEOF( QUERY( q <* SELF\representation.items|
                                'ANNOTATED_3D_MODEL_EQUIVALENCE_ASSEMBLY_MIM.A3MS_EQUIVALENCE_INSPECTION_RESULT'
                                 IN TYPEOF(q))) = 0;
  END_ENTITY;

  ENTITY a3m_equivalence_inspection_result_representation_for_shape
    SUBTYPE OF(a3m_equivalence_inspection_result_representation);
    WHERE
      WR1 : SIZEOF( QUERY( q <* SELF\representation.items|
                                'ANNOTATED_3D_MODEL_EQUIVALENCE_ASSEMBLY_MIM.A3MA_EQUIVALENCE_INSPECTION_RESULT'
                                 IN TYPEOF(q))) = 0;
  END_ENTITY;
  
  ENTITY a3ma_assembly_and_shape_criteria_relationship
    SUBTYPE OF(representation_item_relationship);  
       SELF\representation_item_relationship.relating_representation_item : different_component_shape;
       SELF\representation_item_relationship.related_representation_item : a3m_equivalence_criterion_for_shape;
  END_ENTITY;
 
  ENTITY a3ma_equivalence_criterion_assessment_threshold_relationship
   SUBTYPE OF (representation_item_relationship);
    SELF\representation_item_relationship.relating_representation_item :
       different_placement_of_component;
    SELF\representation_item_relationship.related_representation_item : 
       shape_data_quality_lower_value_limit;
  END_ENTITY;
  
  ENTITY a3ma_equivalence_inspection_result
    SUBTYPE OF(data_equivalence_inspection_result);
      SELF\data_equivalence_inspection_result.criterion_inspected:a3m_equivalence_criterion_for_assembly;
    WHERE
     WR1: a3ma_validate_accuracy_types(SELF,
           SELF\data_equivalence_inspection_result.criterion_inspected);
     WR2: SIZEOF (QUERY(re <* bag_to_set(USEDIN(SELF,
           'PRODUCT_DATA_EQUIVALENCE_INSPECTION_RESULT_SCHEMA.DATA_EQUIVALENCE_INSPECTION_REPORT.INSPECTION_RESULT')) |
         NOT(a3ma_validate_element_types(re,
             SELF\data_equivalence_inspection_result.criterion_inspected)))) = 0;
     WR3: SIZEOF (QUERY(re <* bag_to_set(USEDIN(SELF,
           'PRODUCT_DATA_EQUIVALENCE_INSPECTION_RESULT_SCHEMA.DATA_EQUIVALENCE_INSPECTION_REPORT.INSPECTION_RESULT')) |
         NOT(a3ma_validate_detected_difference_types(re,
             SELF\data_equivalence_inspection_result.criterion_inspected)))) = 0;
     WR4: SIZEOF (QUERY(re <* bag_to_set(USEDIN(SELF,
           'PRODUCT_DATA_EQUIVALENCE_INSPECTION_RESULT_SCHEMA.DATA_EQUIVALENCE_INSPECTION_REPORT.INSPECTION_RESULT')) |
         NOT(a3ma_validate_measured_type(re,
             SELF\data_equivalence_inspection_result.criterion_inspected)))) = 0;
  END_ENTITY;

  ENTITY a3ma_length_measure_and_context_dependent_measure_pair
    SUBTYPE OF (compound_representation_item);
  WHERE
    WR1: 'ANNOTATED_3D_MODEL_EQUIVALENCE_ASSEMBLY_MIM.LIST_REPRESENTATION_ITEM' IN TYPEOF(SELF\compound_representation_item.item_element);
    WR2: SIZEOF(SELF\compound_representation_item.item_element) = 2;
    WR3: 'ANNOTATED_3D_MODEL_EQUIVALENCE_ASSEMBLY_MIM.VALUE_REPRESENTATION_ITEM' IN TYPEOF(SELF\compound_representation_item.item_element[1]);
    WR4: SIZEOF(QUERY(vri <* [SELF\compound_representation_item.item_element[1]]|
                   'ANNOTATED_3D_MODEL_EQUIVALENCE_ASSEMBLY_MIM.LENGTH_MEASURE' IN TYPEOF(vri.value_component))) = 1;
    WR5: 'ANNOTATED_3D_MODEL_EQUIVALENCE_ASSEMBLY_MIM.VALUE_REPRESENTATION_ITEM' IN TYPEOF(SELF\compound_representation_item.item_element[2]);
    WR6: SIZEOF(QUERY(vri <* [SELF\compound_representation_item.item_element[2]]|
                   'ANNOTATED_3D_MODEL_EQUIVALENCE_ASSEMBLY_MIM.CONTEXT_DEPENDENT_MEASURE' IN TYPEOF(vri.value_component))) = 1;
  END_ENTITY;

  ENTITY different_angle_of_assembly_constraint
    SUBTYPE OF(a3m_equivalence_criterion_of_detailed_assembly_data_content);  
       SELF\a3m_equivalence_criterion.assessment_specification : a3m_equivalence_assessment_by_numerical_test;
    DERIVE
      SELF\a3m_equivalence_criterion.measured_data_type: a3ma_measured_data_type_name := mdna_plane_angle_measure;
      SELF\a3m_equivalence_criterion.detected_difference_types: LIST[1:1] OF a3ma_detected_difference_type_name
       := [ddna_binary_assembly_constraint];
    WHERE
      WR1 : ('ANNOTATED_3D_MODEL_EQUIVALENCE_ASSEMBLY_MIM.SHAPE_DATA_QUALITY_LOWER_VALUE_LIMIT' 
              IN TYPEOF(SELF\a3m_equivalence_criterion.assessment_specification\
                           a3m_equivalence_assessment_by_numerical_test.threshold))
            AND
            (a3ma_get_value_limit_type(SELF\a3m_equivalence_criterion.assessment_specification\a3m_equivalence_assessment_by_numerical_test.threshold)
             = SELF.measured_data_type);
  END_ENTITY;

   ENTITY different_assembly_centroid
    SUBTYPE OF(a3m_equivalence_criterion_of_representative_assembly_property_value);  
      SELF\a3m_equivalence_criterion.assessment_specification : a3m_equivalence_assessment_by_numerical_test;
    DERIVE
      SELF\a3m_equivalence_criterion.measured_data_type: a3ma_measured_data_type_name := mdna_length_measure;
      SELF\a3m_equivalence_criterion.detected_difference_types: LIST[1:1] OF a3ma_detected_difference_type_name
       := [ddna_cartesian_point];
    WHERE
      WR1 : ('ANNOTATED_3D_MODEL_EQUIVALENCE_ASSEMBLY_MIM.SHAPE_DATA_QUALITY_LOWER_VALUE_LIMIT' 
              IN TYPEOF(SELF\a3m_equivalence_criterion.assessment_specification\
                           a3m_equivalence_assessment_by_numerical_test.threshold))
            AND
            (a3ma_get_value_limit_type(SELF\a3m_equivalence_criterion.assessment_specification\a3m_equivalence_assessment_by_numerical_test.threshold)
             = SELF.measured_data_type);
  END_ENTITY;

   ENTITY different_assembly_centroid_using_notional_solid
    SUBTYPE OF(a3m_equivalence_criterion_of_representative_assembly_property_value);  
      SELF\a3m_equivalence_criterion.assessment_specification : a3m_equivalence_assessment_by_numerical_test;
    DERIVE
      SELF\a3m_equivalence_criterion.measured_data_type: a3ma_measured_data_type_name := mdna_length_measure;
      SELF\a3m_equivalence_criterion.detected_difference_types: LIST[1:1] OF a3ma_detected_difference_type_name
       := [ddna_cartesian_point];
    WHERE
      WR1 : ('ANNOTATED_3D_MODEL_EQUIVALENCE_ASSEMBLY_MIM.SHAPE_DATA_QUALITY_LOWER_VALUE_LIMIT' 
              IN TYPEOF(SELF\a3m_equivalence_criterion.assessment_specification\
                           a3m_equivalence_assessment_by_numerical_test.threshold))
            AND
            (a3ma_get_value_limit_type(SELF\a3m_equivalence_criterion.assessment_specification\a3m_equivalence_assessment_by_numerical_test.threshold)
             = SELF.measured_data_type);
  END_ENTITY;

  ENTITY different_assembly_constraint_type
    SUBTYPE OF(a3m_equivalence_criterion_of_detailed_assembly_data_content);  
      SELF\a3m_equivalence_criterion.assessment_specification : a3m_equivalence_assessment_by_logical_test;
    DERIVE
      SELF\a3m_equivalence_criterion.measured_data_type: a3ma_measured_data_type_name := mdna_boolean_value;
      SELF\a3m_equivalence_criterion.detected_difference_types: LIST[1:1] OF a3ma_detected_difference_type_name
       := [ddna_binary_assembly_constraint];
  END_ENTITY;

  ENTITY different_assembly_volume
    SUBTYPE OF(a3m_equivalence_criterion_of_representative_assembly_property_value);  
       SELF\a3m_equivalence_criterion.assessment_specification : a3m_equivalence_assessment_by_numerical_test;
    DERIVE
      SELF\a3m_equivalence_criterion.measured_data_type: a3ma_measured_data_type_name := mdna_volume_measure;
      SELF\a3m_equivalence_criterion.detected_difference_types: LIST[1:1] OF a3ma_detected_difference_type_name
       := [ddna_volume_measure];
    WHERE
      WR1 : ('ANNOTATED_3D_MODEL_EQUIVALENCE_ASSEMBLY_MIM.SHAPE_DATA_QUALITY_LOWER_VALUE_LIMIT' 
              IN TYPEOF(SELF\a3m_equivalence_criterion.assessment_specification\
                           a3m_equivalence_assessment_by_numerical_test.threshold))
            AND
            (a3ma_get_value_limit_type(SELF\a3m_equivalence_criterion.assessment_specification\a3m_equivalence_assessment_by_numerical_test.threshold)
             = SELF.measured_data_type);
  END_ENTITY;
   
  ENTITY different_component_identification_via_multi_level_reference
    SUBTYPE OF(a3m_equivalence_criterion_of_assembly_data_structure);  
      SELF\a3m_equivalence_criterion.assessment_specification : a3m_equivalence_assessment_by_logical_test;
    DERIVE
      SELF\a3m_equivalence_criterion.measured_data_type: a3ma_measured_data_type_name := mdna_boolean_value;
      SELF\a3m_equivalence_criterion.detected_difference_types: LIST[1:1] OF a3ma_detected_difference_type_name
       := [ddna_multi_level_reference_designator];
  END_ENTITY;

  ENTITY different_component_shape
    SUBTYPE OF(a3m_equivalence_criterion_of_component_property_difference);  
    DERIVE
      SELF\a3m_equivalence_criterion.comparing_element_types :  LIST[1:1] OF a3ma_element_type_name := [etna_shape_representation];
      SELF\a3m_equivalence_criterion.compared_element_types :  LIST[1:1] OF a3ma_element_type_name := [etna_shape_representation];
      SELF\a3m_equivalence_criterion.detected_difference_types: LIST[1:1] OF a3ma_detected_difference_type_name
       := [ddna_a3ms_inspected_equivalence_element_select];
    INVERSE
      shape_criteria: SET [1:?] OF a3ma_assembly_and_shape_criteria_relationship FOR relating_representation_item;
  END_ENTITY;

  ENTITY different_component_type
    SUBTYPE OF(a3m_equivalence_criterion_of_detailed_assembly_data_content);  
      SELF\a3m_equivalence_criterion.assessment_specification : a3m_equivalence_assessment_by_logical_test;
    DERIVE
      SELF\a3m_equivalence_criterion.measured_data_type: a3ma_measured_data_type_name := mdna_boolean_value;
      SELF\a3m_equivalence_criterion.detected_difference_types: LIST[1:1] OF a3ma_detected_difference_type_name
       := [ddna_assembly_component_usage];
  END_ENTITY;

  ENTITY different_length_of_assembly_constraint
    SUBTYPE OF(a3m_equivalence_criterion_of_detailed_assembly_data_content);  
       SELF\a3m_equivalence_criterion.assessment_specification : a3m_equivalence_assessment_by_numerical_test;
    DERIVE
      SELF\a3m_equivalence_criterion.measured_data_type: a3ma_measured_data_type_name := mdna_length_measure;
      SELF\a3m_equivalence_criterion.detected_difference_types: LIST[1:1] OF a3ma_detected_difference_type_name
       := [ddna_binary_assembly_constraint];
    WHERE
      WR1 : ('ANNOTATED_3D_MODEL_EQUIVALENCE_ASSEMBLY_MIM.SHAPE_DATA_QUALITY_LOWER_VALUE_LIMIT' 
              IN TYPEOF(SELF\a3m_equivalence_criterion.assessment_specification\
                           a3m_equivalence_assessment_by_numerical_test.threshold))
            AND
            (a3ma_get_value_limit_type(SELF\a3m_equivalence_criterion.assessment_specification\a3m_equivalence_assessment_by_numerical_test.threshold)
             = SELF.measured_data_type);
  END_ENTITY;

  ENTITY different_number_of_components
    SUBTYPE OF(a3m_equivalence_criterion_of_representative_assembly_property_value);  
      SELF\a3m_equivalence_criterion.assessment_specification : a3m_equivalence_assessment_by_logical_test;
    DERIVE
      SELF\a3m_equivalence_criterion.measured_data_type: a3ma_measured_data_type_name := mdna_boolean_value;
      SELF\a3m_equivalence_criterion.detected_difference_types: LIST[1:1] OF a3ma_detected_difference_type_name
       := [ddna_count_measure];
  END_ENTITY;

  ENTITY different_placement_of_component
    SUBTYPE OF(a3m_equivalence_criterion_of_detailed_assembly_data_content);  
       SELF\a3m_equivalence_criterion.assessment_specification : a3m_equivalence_assessment_by_numerical_test;
    DERIVE
      SELF\a3m_equivalence_criterion.measured_data_type: a3ma_measured_data_type_name := mdna_length_measure_and_context_dependent_measure;
      SELF\a3m_equivalence_criterion.detected_difference_types: LIST[1:1] OF a3ma_detected_difference_type_name
       := [ddna_context_dependent_shape_representation];
    INVERSE
      assessment_threshold_2: a3ma_equivalence_criterion_assessment_threshold_relationship FOR relating_representation_item;  
    WHERE
      WR1 : ('ANNOTATED_3D_MODEL_EQUIVALENCE_ASSEMBLY_MIM.SHAPE_DATA_QUALITY_LOWER_VALUE_LIMIT' 
              IN TYPEOF(SELF\a3m_equivalence_criterion.assessment_specification\
                           a3m_equivalence_assessment_by_numerical_test.threshold)) AND
            (a3ma_get_value_limit_type(SELF\a3m_equivalence_criterion.assessment_specification\a3m_equivalence_assessment_by_numerical_test.threshold)
             = mdna_length_measure);
      WR2 : (a3ma_get_value_limit_type(SELF.assessment_threshold_2\representation_item_relationship.related_representation_item)
             = mdna_context_dependent_measure) AND
             ('ANNOTATED_3D_MODEL_EQUIVALENCE_ASSEMBLY_MIM.CONTEXT_DEPENDENT_UNIT' IN
             TYPEOF(SELF.assessment_threshold_2\representation_item_relationship.related_representation_item\measure_with_unit.unit_component));
  END_ENTITY;

  ENTITY mismatch_of_component
    SUBTYPE OF(a3m_equivalence_criterion_of_assembly_data_structure);  
      SELF\a3m_equivalence_criterion.assessment_specification : a3m_equivalence_assessment_by_logical_test;
    DERIVE
      SELF\a3m_equivalence_criterion.measured_data_type: a3ma_measured_data_type_name := mdna_boolean_value;
      SELF\a3m_equivalence_criterion.detected_difference_types: LIST[1:1] OF a3ma_detected_difference_type_name
       := [ddna_assembly_component_usage];
  END_ENTITY;

   ENTITY missing_assembly_constraint
    SUBTYPE OF(a3m_equivalence_criterion_of_assembly_data_structure);  
      SELF\a3m_equivalence_criterion.assessment_specification : a3m_equivalence_assessment_by_logical_test;
    DERIVE
      SELF\a3m_equivalence_criterion.measured_data_type: a3ma_measured_data_type_name := mdna_boolean_value;
      SELF\a3m_equivalence_criterion.detected_difference_types: LIST[2:2] OF a3ma_detected_difference_type_name
       := [ddna_no_element, ddna_binary_assembly_constraint];
  END_ENTITY;

  ENTITY missing_component
    SUBTYPE OF(a3m_equivalence_criterion_of_assembly_data_structure);  
      SELF\a3m_equivalence_criterion.assessment_specification : a3m_equivalence_assessment_by_logical_test;
    DERIVE
      SELF\a3m_equivalence_criterion.measured_data_type: a3ma_measured_data_type_name := mdna_boolean_value;
      SELF\a3m_equivalence_criterion.detected_difference_types: LIST[2:2] OF a3ma_detected_difference_type_name
       := [ddna_no_element, ddna_assembly_component_usage];
  END_ENTITY;


  FUNCTION a3ma_get_accuracy_types
    (ei:SET [0:?] OF a3m_equivalence_accuracy_association): SET [0:?] OF a3ma_accuracy_type_name;
    LOCAL
      type_out :a3ma_measured_data_type_name;
      retval : SET OF a3ma_accuracy_type_name := [];
    END_LOCAL;
    REPEAT i:= 1 TO SIZEOF(ei);
      type_out := a3ma_get_value_limit_type(ei[i].specific_accuracy.range);
      retval := retval + [atna_others];         
    END_REPEAT;
    RETURN(retval);
  END_FUNCTION;

  FUNCTION a3ma_get_detected_difference_type
    (ei:LIST[0:?] OF equivalence_detected_difference_select):a3ma_detected_difference_type_name;
    LOCAL
    type_out : SET OF STRING;
      sizeei : INTEGER;
    END_LOCAL;
    sizeei := SIZEOF(ei);
    IF(sizeei = 0) THEN
      RETURN(ddna_no_element);
    END_IF;
    type_out := TYPEOF(ei[1]);
    IF(SIZEOF(ei) > 1) THEN
	  RETURN(ddna_others);
	END_IF;
    IF('ANNOTATED_3D_MODEL_EQUIVALENCE_ASSEMBLY_MIM.ASSEMBLY_COMPONENT_USAGE' IN type_out) THEN
       RETURN(ddna_assembly_component_usage);
    END_IF;
    IF('ANNOTATED_3D_MODEL_EQUIVALENCE_ASSEMBLY_MIM.BINARY_ASSEMBLY_CONSTRAINT' IN type_out) THEN
       RETURN(ddna_binary_assembly_constraint);
    END_IF;
    IF('ANNOTATED_3D_MODEL_EQUIVALENCE_ASSEMBLY_MIM.CARTESIAN_POINT' IN type_out) THEN
       RETURN(ddna_cartesian_point);
    END_IF;
    IF('ANNOTATED_3D_MODEL_EQUIVALENCE_ASSEMBLY_MIM.CONTEXT_DEPENDENT_SHAPE_REPRESENTATION' IN type_out) THEN
       RETURN(ddna_context_dependent_shape_representation);
    END_IF;
    IF('ANNOTATED_3D_MODEL_EQUIVALENCE_ASSEMBLY_MIM.COUNT_MEASURE' IN type_out) THEN
       RETURN(ddna_count_measure);
    END_IF;
    IF('ANNOTATED_3D_MODEL_EQUIVALENCE_ASSEMBLY_MIM.MULTI_LEVEL_REFERENCE_DESIGNATOR' IN type_out) THEN
       RETURN(ddna_multi_level_reference_designator);
    END_IF;
    IF('ANNOTATED_3D_MODEL_EQUIVALENCE_ASSEMBLY_MIM.VOLUME_MEASURE' IN type_out) THEN
       RETURN(ddna_volume_measure);
    END_IF;
    IF('ANNOTATED_3D_MODEL_EQUIVALENCE_ASSEMBLY_MIM.A3MS_INSPECTED_EQUIVALENCE_ELEMENT_SELECT' IN type_out) THEN
       RETURN(ddna_a3ms_inspected_equivalence_element_select);
    END_IF;
    RETURN(ddna_others);
  END_FUNCTION;

  FUNCTION a3ma_get_element_type
    (ei:SET[1:?] OF inspected_equivalence_element_select):a3ma_element_type_name;
    LOCAL
    type_out : SET OF STRING;
    END_LOCAL;
    type_out := TYPEOF(ei[1]);
    IF(SIZEOF(ei) > 1) THEN
	  RETURN(etna_others);
	END_IF;
    IF('ANNOTATED_3D_MODEL_EQUIVALENCE_ASSEMBLY_MIM.PRODUCT_DEFINITION_OR_REFERENCE' IN type_out) THEN
       RETURN(etna_product_definition_or_reference);
    END_IF;
    IF('ANNOTATED_3D_MODEL_EQUIVALENCE_ASSEMBLY_MIM.SHAPE_REPRESENTATION' IN type_out) THEN
       RETURN(etna_shape_representation);
    END_IF;
    RETURN(etna_others);
  END_FUNCTION;

  FUNCTION a3ma_get_measured_type
    (ei: equivalence_measured_value_select):a3ma_measured_data_type_name;
    LOCAL
    type_out : SET OF STRING;
    END_LOCAL;
    type_out := TYPEOF(ei);
    IF('ANNOTATED_3D_MODEL_EQUIVALENCE_ASSEMBLY_MIM.BOOLEAN_VALUE' IN type_out) THEN
       RETURN(mdna_boolean_value);
    END_IF;
    IF('ANNOTATED_3D_MODEL_EQUIVALENCE_ASSEMBLY_MIM.CONTEXT_DEPENDENT_MEASURE' IN type_out) THEN
       RETURN(mdna_context_dependent_measure);
    END_IF;
    IF('ANNOTATED_3D_MODEL_EQUIVALENCE_ASSEMBLY_MIM.LENGTH_MEASURE' IN type_out) THEN
       RETURN(mdna_length_measure);
    END_IF;
    IF('ANNOTATED_3D_MODEL_EQUIVALENCE_ASSEMBLY_MIM.A3MA_LENGTH_MEASURE_AND_CONTEXT_DEPENDENT_MEASURE_PAIR' IN type_out) THEN
       RETURN(mdna_length_measure_and_context_dependent_measure);
    END_IF;
    IF('ANNOTATED_3D_MODEL_EQUIVALENCE_ASSEMBLY_MIM.PLANE_ANGLE_MEASURE' IN type_out) THEN
       RETURN(mdna_plane_angle_measure);
    END_IF;
    IF('ANNOTATED_3D_MODEL_EQUIVALENCE_ASSEMBLY_MIM.VOLUME_MEASURE' IN type_out) THEN
       RETURN(mdna_volume_measure);
    END_IF;
    RETURN(mdna_others);
  END_FUNCTION;

  FUNCTION a3ma_get_value_limit_type
    (ei:shape_data_quality_value_limit_type_select):a3ma_measured_data_type_name;
    LOCAL
    type_out : SET OF STRING;
    END_LOCAL;
    type_out := value_limit_type(ei);
    IF('ANNOTATED_3D_MODEL_EQUIVALENCE_ASSEMBLY_MIM.CONTEXT_DEPENDENT_MEASURE' IN type_out) THEN
       RETURN(mdna_context_dependent_measure);
    END_IF;
    IF('ANNOTATED_3D_MODEL_EQUIVALENCE_ASSEMBLY_MIM.LENGTH_MEASURE' IN type_out) THEN
       RETURN(mdna_length_measure);
    END_IF;
    IF('ANNOTATED_3D_MODEL_EQUIVALENCE_ASSEMBLY_MIM.PLANE_ANGLE_MEASURE' IN type_out) THEN
       RETURN(mdna_plane_angle_measure);
    END_IF;
    IF('ANNOTATED_3D_MODEL_EQUIVALENCE_ASSEMBLY_MIM.VOLUME_MEASURE' IN type_out) THEN
       RETURN(mdna_volume_measure);
    END_IF;
    RETURN(mdna_others);
  END_FUNCTION;

  FUNCTION a3ma_validate_accuracy_types
    (ei:accuracy_associated_target_select;
     cr:a3m_equivalence_criterion_for_assembly):LOGICAL;
    LOCAL
      aeaa : SET OF a3m_equivalence_accuracy_association;
      rp :  SET OF representation;
      tp : SET OF a3ma_accuracy_type_name := [];     
    END_LOCAL;
    REPEAT i:= 1 TO SIZEOF(cr.accuracy_types);
      tp := tp + [cr.accuracy_types[i]];
    END_REPEAT;
    -- aats is rep_item
    IF( 'ANNOTATED_3D_MODEL_EQUIVALENCE_INSPECTION_RESULT_MIM.REPRESENTATION_ITEM' IN TYPEOF(ei)) THEN
       -- specific accuracy
       aeaa := bag_to_set(USEDIN(ei,
             'ANNOTATED_3D_MODEL_EQUIVALENCE_INSPECTION_RESULT_MIM.A3M_EQUIVALENCE_ACCURACY_ASSOCIATION.EQUIVALENCE_TARGET'));
       IF(SIZEOF(cr.accuracy_types) = 0) THEN
          IF(SIZEOF(aeaa) = 0) THEN
             RETURN(TRUE);
          ELSE
            RETURN(FALSE);
          END_IF;
       END_IF;
       IF(a3ma_get_accuracy_types(aeaa) = tp) THEN
	      RETURN(TRUE);
       END_IF;
       -- global accuracy
       rp := bag_to_set(USEDIN(ei,
           'ANNOTATED_3D_MODEL_EQUIVALENCE_INSPECTION_RESULT_MIM.REPRESENTATION.ITEMS'));
    ELSE
      IF( 'ANNOTATED_3D_MODEL_EQUIVALENCE_INSPECTION_RESULT_MIM.REPRESENTATION' IN TYPEOF(ei)) THEN
         rp := [ei];
      ELSE
         rp := [];
      END_IF;   
    END_IF;
    -- global accuracy check
    aeaa := [];
    REPEAT i:= 1 TO SIZEOF(rp);
	  aeaa := aeaa + bag_to_set(USEDIN(rp[i],
           'ANNOTATED_3D_MODEL_EQUIVALENCE_INSPECTION_RESULT_MIM.A3M_EQUIVALENCE_ACCURACY_ASSOCIATION.EQUIVALENCE_TARGET'));
    END_REPEAT;
    IF(a3ma_get_accuracy_types(aeaa) >= tp) THEN
	  RETURN(TRUE);
    END_IF;
    RETURN(FALSE);
  END_FUNCTION;

  FUNCTION a3ma_validate_detected_difference_types
    (ei:data_equivalence_inspection_report;
     cr:a3m_equivalence_criterion_for_assembly):LOGICAL;
    LOCAL
      deiir : data_equivalence_inspection_instance_report;
      eiriwei : equivalence_instance_report_item_with_notable_instances;
     END_LOCAL;
    -- data_equivalence_inspection_instance_report
    IF('ANNOTATED_3D_MODEL_EQUIVALENCE_ASSEMBLY_MIM.DATA_EQUIVALENCE_INSPECTION_INSTANCE_REPORT' IN TYPEOF(ei)) THEN
      deiir := ei;
      REPEAT i := 1 TO SIZEOF(deiir.inspected_instances);
    --   >     equivalence_notable_instance.measured_value 
        IF('ANNOTATED_3D_MODEL_EQUIVALENCE_ASSEMBLY_MIM.EQUIVALENCE_INSTANCE_REPORT_ITEM_WITH_NOTABLE_INSTANCES'
           IN TYPEOF(deiir.inspected_instances[i])) THEN
           eiriwei := deiir.inspected_instances[i];
           REPEAT j := 1 TO SIZEOF(eiriwei.notable_instances);
             IF(NOT(a3ma_get_detected_difference_type(
                       eiriwei.notable_instances[j].comparing_elements)
                    IN cr.detected_difference_types)) THEN
			    RETURN(FALSE);
			 END_IF;     
             IF(NOT(a3ma_get_detected_difference_type(
                       eiriwei.notable_instances[j].compared_elements)
                    IN cr.detected_difference_types)) THEN
			    RETURN(FALSE);
			 END_IF;
           END_REPEAT;
        END_IF;
      END_REPEAT;
    END_IF;
    RETURN(TRUE);
  END_FUNCTION;

  FUNCTION a3ma_validate_element_types
    (ei:data_equivalence_inspection_report;
     cr:a3m_equivalence_criterion_for_assembly):LOGICAL;
    LOCAL
      compared_et:a3ma_element_type_name;
      comparing_et:a3ma_element_type_name;
      deiir : data_equivalence_inspection_instance_report;
      aeiiri : a3m_equivalence_inspection_instance_report_item;
       deiep : data_equivalence_inspected_element_pair;
    END_LOCAL;
    -- data_equivalence_inspection_instance_report
    IF('ANNOTATED_3D_MODEL_EQUIVALENCE_ASSEMBLY_MIM.DATA_EQUIVALENCE_INSPECTION_INSTANCE_REPORT' IN TYPEOF(ei)) THEN
      deiir := ei;
      REPEAT i := 1 TO SIZEOF(deiir.inspected_instances);
    --   > a3m_equivalence_inspection_instance_report_item
        IF('ANNOTATED_3D_MODEL_EQUIVALENCE_ASSEMBLY_MIM.A3M_EQUIVALENCE_INSPECTION_INSTANCE_REPORT_ITEM'
           IN TYPEOF(deiir.inspected_instances[i])) THEN
           aeiiri := deiir.inspected_instances[i];
            deiep := aeiiri.inspected_element;
           compared_et := a3ma_get_element_type(deiep.compared_elements);
           comparing_et := a3ma_get_element_type(deiep.comparing_elements);
           IF(NOT(compared_et IN cr.compared_element_types) OR
              NOT(comparing_et IN cr.comparing_element_types)) THEN
             RETURN(FALSE);
           END_IF;
	   	   IF(compared_et <> comparing_et) THEN
               RETURN(FALSE);
           END_IF;
        END_IF;
      END_REPEAT;
    END_IF;
    RETURN(TRUE);
  END_FUNCTION;

  FUNCTION a3ma_validate_measured_type
    (ei:data_equivalence_inspection_report;
     cr:a3m_equivalence_criterion_for_assembly):LOGICAL;
    LOCAL
      amdtn : a3ma_measured_data_type_name;
	  deicr : data_equivalence_inspection_criterion_report;
      acriwmv : a3m_equivalence_criterion_report_item_with_measured_value;
      deiir : data_equivalence_inspection_instance_report;
      aeiiri : a3m_equivalence_inspection_instance_report_item;
      eiriwei : equivalence_instance_report_item_with_notable_instances;
    END_LOCAL;
    amdtn := cr.measured_data_type;
    -- data_equivalence_inspection_criterion_report
    IF('ANNOTATED_3D_MODEL_EQUIVALENCE_ASSEMBLY_MIM.DATA_EQUIVALENCE_INSPECTION_CRITERION_REPORT' IN TYPEOF(ei)) THEN
      deicr := ei;
      REPEAT i := 1 TO SIZEOF(deicr.statistical_values);
    -- a3m_equivalence_criterion_report_item_with_measured_value.representative_measured_value
        IF('ANNOTATED_3D_MODEL_EQUIVALENCE_ASSEMBLY_MIM.A3M_EQUIVALENCE_CRITERION_REPORT_ITEM_WITH_MEASURED_VALUE'
           IN TYPEOF(deicr.statistical_values[i])) THEN
           acriwmv := deicr.statistical_values[i];
           IF(a3ma_get_measured_type(acriwmv.representative_measured_value) <> amdtn) THEN
             RETURN(FALSE);
           END_IF;
        END_IF;
      END_REPEAT;
    END_IF;
    -- data_equivalence_inspection_instance_report
    IF('ANNOTATED_3D_MODEL_EQUIVALENCE_ASSEMBLY_MIM.DATA_EQUIVALENCE_INSPECTION_INSTANCE_REPORT' IN TYPEOF(ei)) THEN
      deiir := ei;
      REPEAT i := 1 TO SIZEOF(deiir.inspected_instances);
    --   > a3m_equivalence_inspection_instance_report_item.measured_value_for_inspected_element
        IF('ANNOTATED_3D_MODEL_EQUIVALENCE_ASSEMBLY_MIM.A3M_EQUIVALENCE_INSPECTION_INSTANCE_REPORT_ITEM'
           IN TYPEOF(deiir.inspected_instances[i])) THEN
           aeiiri := deiir.inspected_instances[i];
           IF(a3ma_get_measured_type(aeiiri.measured_value_for_inspected_element) <> amdtn) THEN
             RETURN(FALSE);
           END_IF;
        END_IF;
    --   >     equivalence_notable_instance.measured_value 
        IF('ANNOTATED_3D_MODEL_EQUIVALENCE_ASSEMBLY_MIM.EQUIVALENCE_INSTANCE_REPORT_ITEM_WITH_NOTABLE_INSTANCES'
           IN TYPEOF(deiir.inspected_instances[i])) THEN
           eiriwei := deiir.inspected_instances[i];
           REPEAT j := 1 TO SIZEOF(eiriwei.notable_instances);
             IF(a3ma_get_measured_type(eiriwei.notable_instances[j].measured_value) <> amdtn) THEN
               RETURN(FALSE);
             END_IF;
           END_REPEAT;
        END_IF;
      END_REPEAT;
    END_IF;
    RETURN(TRUE);     
  END_FUNCTION;

END_SCHEMA;
